name: Backend CI/CD - deploy

on:
  push:
    branches:
    - master

permissions:
  contents: read

env:
  WORKING_DIRECTORY: ./TTT-server/TTT
  AWS_REGION: ap-northeast-2
  S3_BUCKET_NAME: ttt-s3bucket
  CODE_DEPLOY_APPLICATION_NAME: ttt-codedeploy-application
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: ttt-codedeploy-group
  
jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: prod

    steps:
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'adopt'
    
    # Gradle을 캐싱해둡니다 -> 빌드 속도가 증가하는 효과가 있습니다.
    - name: Cache Gradle
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
                ${{ runner.os }}-gradle-
    
    - name: Build with Gradle
      run: |
        ./gradlew clean build \
        -Dspring.config.location=/home/ec2-user/app/config/application-prod.yml,/home/ec2-user/app/config/application-oauth.yml \
        -Dspring.profiles.active=prod
      working-directory: ${{ env.WORKING_DIRECTORY }}

    # zip file 생성
    - name: Make zip file
      run: |
        mkdir deploy
        cp ./docker/docker-compose.blue.yml ./deploy/
        cp ./docker/docker-compose.green.yml ./deploy/
        cp ./appspec.yml ./deploy/
        cp ./docker/Dockerfile ./deploy/
        cp ./scripts/*.sh ./deploy/
        cp ./build/libs/*.jar ./deploy/
        zip -r -qq -j ./spring-build.zip ./deploy
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Upload to S3
      run: |
        aws s3 cp \
        --region ap-northeast-2 \
        ./spring-build.zip s3://$S3_BUCKET_NAME
            
    - name: Deploy to AWS EC2 from S3
      run: |
          aws deploy create-deployment \
            --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
            --deployment-config-name CodeDeployDefault.OneAtATime \
            --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
            --s3-location bucket=$S3_BUCKET_NAME,key=spring-build.zip,bundleType=zip
    # Slack 알람 발송
    - name: Notification to Slcak
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_CHANNEL: general
        SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
        SLACK_ICON: https://github.com/rtCamp.png?size=48
        SLACK_MESSAGE: 배포 결과 => ${{ job.status }}
        SLACK_TITLE: 배포 결과 알람
        SLACK_USERNAME: Notification-Bot
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
      # 이 구문을 추가해야 빌드 성공 실패와 상관없이 동작합니다.
      if: always()
